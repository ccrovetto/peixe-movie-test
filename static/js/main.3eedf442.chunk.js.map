{"version":3,"sources":["logo.svg","componentes/CardPelicula.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardPelicula","props","handleChange","e","setState","target","id","value","state","resultado","buscador","loading","preventDefault","this","axios","get","then","res","setTimeout","data","Search","catch","err","console","log","style","width","height","className","role","backgroundImage","onSubmit","buscarPelicula","icon","onChange","type","placeholder","aria-label","color","size","breakpointCols","default","1100","700","500","columnClassName","map","r","hover","zoom","src","Poster","overlay","paddingTop","Title","Year","Component","defaults","baseURL","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,kOCmH5BC,E,kDArGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IASVC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOC,GAAKH,EAAEE,OAAOE,SAV5B,EAAKC,MAAQ,CACTC,UAAW,GACXC,SAAU,GACVC,SAAS,GALE,E,2DAkBJR,GAAI,IAAD,OACdA,EAAES,iBACFC,KAAKT,SAAS,CAAEO,SAAS,IACzBG,IAAMC,IAAI,uBAAyBF,KAAKL,MAAME,UAAUM,MAAK,SAACC,GAC1DC,YAAW,kBACP,EAAKd,SAAS,CAAEK,UAAWQ,EAAIE,KAAKC,OAAQT,SAAS,MACnD,QAEPU,OAAM,SAAAC,GAAG,OACRC,QAAQC,IAAIF,Q,+BAKV,IAAD,OASL,OACIT,KAAKL,MAAMG,QAEP,yBAAKc,MAAO,CAAEC,MAAO,QAASC,OAAQ,SAAWC,UAAU,+BAA+BC,KAAK,UAC3F,0BAAMD,UAAU,WAAhB,eAGJ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQH,MAAO,CAACK,gBAAkB,IAAKF,UAAU,eAC7C,0BAAMG,SAAU,SAAC5B,GAAD,OAAO,EAAK6B,eAAe7B,IAAIyB,UAAU,gDACrD,kBAAC,IAAD,CAASK,KAAK,WACd,2BAAOC,SAAUrB,KAAKX,aAAcK,MAAOM,KAAKL,MAAME,SAAUJ,GAAG,WAAWsB,UAAU,yCAAyCO,KAAK,OAAOC,YAAY,SAASC,aAAW,WAC7K,kBAAC,IAAD,CAAQF,KAAK,SAASG,MAAM,QAAQC,KAAK,MAAzC,aAIZ,kBAAC,IAAD,CAAQX,UAAU,IAEd,kBAAC,IAAD,KAGI,kBAAC,IAAD,CACIY,eA9BK,CACzBC,QAAS,EACTC,KAAM,EACNC,IAAK,EACLC,IAAK,GA2BehB,UAAU,kBACViB,gBAAgB,0BACfhC,KAAKL,MAAMC,UAAYI,KAAKL,MAAMC,UAAUqC,KAAI,SAACC,GAAD,OAC7C,kBAAC,IAAD,CAASC,OAAK,EAACC,MAAI,GACf,yBAAKxB,MAAO,CAAEC,MAAO,QAAUwB,IAAKH,EAAEI,SACtC,kBAAC,IAAD,CAASC,QAAQ,gBACb,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ3B,MAAO,CAAE4B,WAAY,SAAWzB,UAAU,eAC9C,4BAAQA,UAAU,cAAcmB,EAAEO,OAC1D,2BAAIP,EAAEQ,cAQF,6C,GApFTC,aCP3B1C,IAAM2C,SAASC,QAAU,yBAmBVC,MAhBf,WACE,OACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,eAIlB,4BAAQA,UAAU,eAClB,kBAAC,EAAD,SCLcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdrD,OAAM,SAAAsD,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.3eedf442.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport axios from 'axios'\r\nimport './CardPeli.css'\r\nimport {\r\n    MDBContainer,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBView,\r\n    MDBMask, MDBCard, MDBInput, MDBIcon, MDBBtn\r\n} from 'mdbreact'\r\nimport Masonry from 'react-masonry-css'\r\n\r\nclass CardPelicula extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            resultado: [],\r\n            buscador: '',\r\n            loading: false\r\n        }\r\n\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    buscarPelicula(e) {\r\n        e.preventDefault();\r\n        this.setState({ loading: true })\r\n        axios.get('/?apikey=58fd7878&s=' + this.state.buscador).then((res) => {\r\n            setTimeout(() =>\r\n                this.setState({ resultado: res.data.Search, loading: false })\r\n                , 500);\r\n\r\n        }).catch(err =>\r\n            console.log(err))\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const breakpointColumnsObj = {\r\n            default: 4,\r\n            1100: 3,\r\n            700: 2,\r\n            500: 1\r\n        };\r\n\r\n        return (\r\n            this.state.loading ?\r\n\r\n                <div style={{ width: '100px', height: '100px' }} className=\" spinner-border text-success\" role=\"status\" >\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div > :\r\n\r\n                <MDBContainer >\r\n                    <MDBRow>\r\n                        <MDBCol style={{backgroundImage : ''}} className=\"text-center\">\r\n                            <form onSubmit={(e) => this.buscarPelicula(e)} className=\"justify-content-center form-inline mt-4 mb-4\">\r\n                                <MDBIcon icon=\"search\" />\r\n                                <input onChange={this.handleChange} value={this.state.buscador} id='buscador' className=\"form-control form-control-sm ml-3 w-20\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                                <MDBBtn type=\"submit\" color=\"green\" size=\"sm\">Buscar</MDBBtn>\r\n                            </form>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow className=\"\">\r\n\r\n                        <MDBCol>\r\n\r\n\r\n                            <Masonry\r\n                                breakpointCols={breakpointColumnsObj}\r\n                                className=\"my-masonry-grid\"\r\n                                columnClassName=\"my-masonry-grid_column\">\r\n                                {this.state.resultado ? this.state.resultado.map((r) =>\r\n                                    <MDBView hover zoom>\r\n                                        <img style={{ width: '100%' }} src={r.Poster} />\r\n                                        <MDBMask overlay=\"black-strong\">\r\n                                            <MDBContainer>\r\n                                                <MDBRow>\r\n                                                    <MDBCol style={{ paddingTop: '10rem' }} className=\"text-center\">\r\n                                                        <strong className=\"white-text\">{r.Title}</strong>\r\n                                <p>{r.Year}</p>\r\n                                                    </MDBCol>\r\n                                                </MDBRow>\r\n\r\n                                            </MDBContainer>\r\n\r\n                                        </MDBMask>\r\n                                    </MDBView>\r\n                                ) : <></>}\r\n                            </Masonry>\r\n                        </MDBCol>\r\n\r\n\r\n                    </MDBRow>\r\n\r\n\r\n\r\n                </MDBContainer>\r\n        )\r\n    }\r\n}\r\n\r\nCardPelicula.propTypes = {\r\n\r\n}\r\n\r\nexport default CardPelicula","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport CardPelicula from './componentes/CardPelicula'\n\naxios.defaults.baseURL = 'http://www.omdbapi.com';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       \n        \n      </header>\n      <header className=\"App-content\">\n      <CardPelicula/>\n        \n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css'; import\n'bootstrap-css-only/css/bootstrap.min.css'; import\n'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}